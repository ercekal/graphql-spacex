{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","launch_year","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","Link","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_apollo_browser_umd","query","loading","error","data","console","log","react","launches","map","Component","LAUNCH_QUERY","Launch_templateObject","Launch","props","match","params","parseInt","variables","_data$launch","_data$launch$rocket","rocket","rocket_id","rocket_type","rocket_name","client","ApolloClient","uri","App","BrowserRouter","src","logo","alt","style","width","display","margin","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c6f4564.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e96bf509.png\";","import React from 'react'\nimport Moment from 'react-moment'\nimport classNames from 'classnames'\nimport { Link } from 'react-router-dom'\n\nexport default function LaunchItem({launch: { flight_number, mission_name, launch_date_local, launch_year, launch_success }}) {\n\treturn (\n\t\t<div className=\"card card-body mb-3\">\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col-md-9\">\n\t\t\t\t\t<h4>Mission: <span className={classNames({\n\t\t\t\t\t\t'text-success': launch_success,\n\t\t\t\t\t\t'text-danger': !launch_success\n\t\t\t\t\t})}>{mission_name}</span></h4>\n\t\t\t\t\t<p>Data: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-md-3\">\n\t\t\t\t\t<Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details </Link>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n\t\t\t<p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n    </div>\n  )\n}\n","import React, { Component, Fragment } from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey'\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n\t\tlaunches {\n\t\t\tflight_number\n\t\t\tmission_name\n\t\t\tlaunch_year\n\t\t\tlaunch_date_local\n\t\t\tlaunch_success\n\t\t}\n\t}\n`\n\nexport class Launches extends Component {\n  render() {\n    return (\n      <div>\n        <h1 className='display-4 my-3'>Launches</h1>\n\t\t\t\t<MissionKey />\n\t\t\t\t<Query query={LAUNCHES_QUERY}>\n\t\t\t\t\t{\n\t\t\t\t\t\t({loading, error, data}) => {\n\t\t\t\t\t\t\tif(loading) return <h4>Loading...</h4>\n\t\t\t\t\t\t\tif(error) console.log(error);\n\t\t\t\t\t\t\tconsole.log(data);\n\t\t\t\t\t\t\treturn <Fragment>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdata.launches.map(launch => {\n\t\t\t\t\t\t\t\t\t\treturn <LaunchItem key={launch.flight_number} launch={launch} />\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t</Query>\n      </div>\n    )\n  }\n}\n\nexport default Launches\n","import React, { Component, Fragment } from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport Moment from 'react-moment'\nimport classNames from 'classnames'\nimport { Link } from 'react-router-dom'\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n\t\tlaunch(flight_number: $flight_number) {\n\t\t\tflight_number\n\t\t\tmission_name\n\t\t\tlaunch_year\n\t\t\tlaunch_date_local\n\t\t\tlaunch_success\n\t\t\trocket {\n\t\t\t\trocket_id\n\t\t\t\trocket_type\n\t\t\t\trocket_name\n\t\t\t}\n\t\t}\n\t}\n`\nexport class Launch extends Component {\n  render() {\n\t\tlet { flight_number } = this.props.match.params\n\t\tflight_number = parseInt(flight_number)\n    return (\n      <Fragment>\n        <h1>Launch</h1>\n\t\t\t\t<Query query={LAUNCH_QUERY} variables={{flight_number}}>\n\t\t\t\t{\n\t\t\t\t\t\t({loading, error, data}) => {\n\t\t\t\t\t\t\tif(loading) return <h4>Loading...</h4>\n\t\t\t\t\t\t\tif(error) console.log(error);\n\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\tmission_name,\n\t\t\t\t\t\t\t\tlaunch_date_local,\n\t\t\t\t\t\t\t\tlaunch_success,\n\t\t\t\t\t\t\t\trocket: {\n\t\t\t\t\t\t\t\t\trocket_id,\n\t\t\t\t\t\t\t\t\trocket_type,\n\t\t\t\t\t\t\t\t\trocket_name,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} = data.launch\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div className=\"col-md-9\">\n\t\t\t\t\t\t\t\t\t<h4>Mission: <span className={classNames({\n\t\t\t\t\t\t\t\t\t\t'text-success': launch_success,\n\t\t\t\t\t\t\t\t\t\t'text-danger': !launch_success\n\t\t\t\t\t\t\t\t\t})}>{mission_name}</span></h4>\n\t\t\t\t\t\t\t\t\t<p>Data: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n\t\t\t\t\t\t\t\t\t<p>Rocket id: {rocket_id}</p>\n\t\t\t\t\t\t\t\t\t<p>Rocket name: {rocket_name}</p>\n\t\t\t\t\t\t\t\t\t<p>Rocket type: {rocket_type}</p>\n\t\t\t\t\t\t\t\t\t<Link to=\"/\">Back</Link>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t</Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Launch\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost'\nimport {ApolloProvider} from 'react-apollo'\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport logo from './logo.png'\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n            <img\n              src={logo}\n              alt=\"spacex\"\n              style={{ width: 300, display: 'block', margin: 'auto' }}\n              />\n            <Route exact path=\"/\" component={Launches} />\n            <Route exact path=\"/launch/:flight_number\" component={Launch} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}